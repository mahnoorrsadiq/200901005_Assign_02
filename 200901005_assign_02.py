# -*- coding: utf-8 -*-
"""200901005_Assign_02.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1g2RVESr_kTnNfS4UXpVp58Za8oTyEwKD
"""

# MODULE 1 
import re

def tokenize(code):
    # Regular expression to match tokens
    token_regex = r"""
        (?P<INTEGER>\d+) |  # integers
        (?P<PLUS>\+) |      # plus sign
        (?P<MINUS>-) |      # minus sign
        (?P<MULTIPLY>\*) |      # multiplication sign
        (?P<DIVISION>/) |        # division sign
        (?P<LEFTPARENTHESIS>\() |    # left parenthesis
        (?P<RIGHTPARENTHESIS>\))      # right parenthesis
    """
    # Create a regular expression object to match tokens
    token_pattern = re.compile(token_regex, re.VERBOSE)

    # Tokenize the code
    tokens = []
    for match in token_pattern.finditer(code):
        token_type = match.lastgroup
        token_value = match.group()
        tokens.append((token_type, token_value))

    return tokens

# Test the lexer
print(tokenize("5 + 4 * 10"))  # [('INTEGER', '5'), ('PLUS', '+'), ('INTEGER', '4'), ('MULT', '*'), ('INTEGER', '10')]
print(tokenize("(5 + 4) * 10"))  # [('LPAREN', '('), ('INTEGER', '5'), ('PLUS', '+'), ('INTEGER', '4'), ('RPAREN', ')'), ('MULT', '*'), ('INTEGER', '10')]

# MODULE 2 
import ast

# Parse an expression into an AST
expr = "5 + 3 * 4"
tree = ast.parse(expr)

# Print the AST
print(ast.dump(tree))